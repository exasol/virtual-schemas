package com.exasol.adapter.dialects;

import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.when;


import java.io.File;
import java.lang.reflect.InvocationTargetException;
import java.util.*;

import javax.json.JsonObject;
import javax.json.JsonValue;

import com.exasol.adapter.AdapterException;
import com.exasol.adapter.dialects.impl.ExasolSqlDialect;
import com.exasol.adapter.json.RequestJsonParser;
import com.exasol.adapter.jdbc.SchemaAdapterNotes;
import com.exasol.adapter.request.AdapterRequest;
import com.exasol.adapter.request.PushdownRequest;
import com.exasol.utils.JsonHelper;
import com.google.common.base.Charsets;
import com.google.common.io.Files;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.mockito.Mockito;


/**
 * This is an integration test for virtual schemas. The idea is that 
 * the jdbc-adapter and the EXASOL database have a common set of testdata 
 * to use. By doing this we avoid to write and keep tests in multiple 
 * locations.
 * <p>
 * This class is a testrunner that executes the given (in json file) test 
 * scenarios and asserts the results.
 * <p>
 * Writing a new test means writing new testdata files. The testfiles are 
 * in json format and have to have the extension .json. The following 
 * attributes have to be present:
 * <ul><li>testSchema: 
 * This is the schema definition. This test does not use the schema 
 * definition, since the testcase parses the pushdown request directly.
 * <li> testCases: 
 * A list of testcases to be performed on the schema, each of which contains:
 *   <ul><li> testQuery: 
 *     A single string containing the test query. This test does not use 
 *     the test query, since the testcase parses the pushdown request directly.
 *   <li> expectedPushdownRequest: 
 *     A list of pushdownRequests as they are generated by the database. 
 *     This is a list because a single query can generate multiple pushdowns 
 *     (e.g. join).
 *   <li> expectedPushdownResponse: 
 *     For each dialect that should be tested a list of strings with the 
 *     returned Pushdown SQLs.
 *
 */
@RunWith(Parameterized.class)
public class FileBasedIntegrationTest {
    private static final String INTEGRATION_TESTFILES_DIR = "target/test-classes/integration";
    private static final String TEST_FILE_KEY_TESTCASES = "testCases";
    private static final String TEST_FILE_KEY_EXP_PD_REQUEST = "expectedPushdownRequest";
    private static final String TEST_FILE_KEY_EXP_PD_RESPONSE = "expectedPushdownResponse";
    private static final String JSON_API_KEY_INVOLVED_TABLES = "involvedTables";

    @Parameterized.Parameters(name = "{index}: {0}")
    public static Iterable<? extends Object> data() {
        final File testDir = new File(INTEGRATION_TESTFILES_DIR);
        return Arrays.asList(testDir.listFiles((dir, name) -> name.endsWith(".json")));
    }

    private final File testFile;

    public FileBasedIntegrationTest(final File testFile) {
        this.testFile = testFile;
    }

    @Test
    public void testPushdownFromTestFile() throws Exception {
        final String jsonTest = Files.toString(testFile, Charsets.UTF_8);
        final int numberOftests = getNumberOfTestsFrom(jsonTest);
        for (int testNr = 0; testNr < numberOftests; testNr++) {
            final List<PushdownRequest> pushdownRequests = getPushdownRequestsFrom(jsonTest, testNr);
            final Map<String, List<String>> expectedPushdownQueries = getExpectedPushdownQueriesFrom(jsonTest, testNr);
            for (final String dialect : expectedPushdownQueries.keySet()) {
                for (final PushdownRequest pushdownRequest : pushdownRequests) {
                    final String pushdownQuery = generatePushdownQuery(dialect, pushdownRequest, hasMultipleTables(jsonTest, testNr), testFile.getName(), testNr);
                    assertExpectedPushdowns(expectedPushdownQueries.get(dialect), pushdownQuery, testFile.getName(), testNr, dialect);
                }
            }
        }
    }

    private void assertExpectedPushdowns(final List<String> expectedPushdownQueries, final String pushdownQuery, final String testFile,
                                         final int testNr, final String dialect) {
        final boolean foundInExpected = expectedPushdownQueries.stream().anyMatch(pushdownQuery::contains);
        final StringBuilder errorMessage = new StringBuilder();
        if (!foundInExpected)
        {
            errorMessage.append("Generated Pushdown: ");
            errorMessage.append(pushdownQuery);
            errorMessage.append(" not found in expected pushdowns (");
            errorMessage.append(expectedPushdownQueries);
            errorMessage.append("). Testfile: ");
            errorMessage.append(testFile);
            errorMessage.append(" ,Test#: ");
            errorMessage.append(testNr);
            errorMessage.append(" ,Dialect: ");
            errorMessage.append(dialect);
        }
        assertTrue(errorMessage.toString(), foundInExpected);
    }

    private int getNumberOfTestsFrom(final String jsonTest) throws Exception {
        final JsonObject root = JsonHelper.getJsonObject(jsonTest);
        return root.getJsonArray(TEST_FILE_KEY_TESTCASES).size();
    }

    private List<PushdownRequest> getPushdownRequestsFrom(final String jsonTest, final int testNr) throws Exception {
        final JsonObject root = JsonHelper.getJsonObject(jsonTest);
        final JsonObject test = root.getJsonArray(TEST_FILE_KEY_TESTCASES).getValuesAs(JsonObject.class).get(testNr);
        final int numberOfPushdownRequests = test.getJsonArray(TEST_FILE_KEY_EXP_PD_REQUEST).size();
        final List<PushdownRequest> pushdownRequests = new ArrayList<PushdownRequest>(numberOfPushdownRequests);
        for(int requestNr = 0; requestNr < numberOfPushdownRequests; requestNr++) {
            final String req = test.getJsonArray(TEST_FILE_KEY_EXP_PD_REQUEST).get(requestNr).toString();
            final RequestJsonParser parser = new RequestJsonParser();
            final AdapterRequest request = parser.parseRequest(req);
            pushdownRequests.add((PushdownRequest) request);
        }
        return pushdownRequests;
    }

    private Boolean hasMultipleTables(final String jsonTest, final int testNr) throws Exception {
        final JsonObject root = JsonHelper.getJsonObject(jsonTest);
        final JsonObject test = root.getJsonArray(TEST_FILE_KEY_TESTCASES).getValuesAs(JsonObject.class).get(testNr);
        final JsonValue req = test.getJsonArray(TEST_FILE_KEY_EXP_PD_REQUEST).get(0);
        final int size = ((JsonObject) req).getJsonArray(JSON_API_KEY_INVOLVED_TABLES).size();
        return size > 1;
    }

    private String generatePushdownQuery(final String dialect, final PushdownRequest pushdownRequest, final Boolean multipleTables, final String testFile, final int testNr) throws AdapterException, ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {
            final String schemaName = "LS";
            final SqlGenerationContext context = new SqlGenerationContext("", schemaName, false, multipleTables);
            final SchemaAdapterNotes notes = Mockito.mock(SchemaAdapterNotes.class);
            when(notes.isNullsAreSortedAtEnd()).thenReturn(false);
            when(notes.isNullsAreSortedAtStart()).thenReturn(false);
            when(notes.isNullsAreSortedHigh()).thenReturn(true);
            when(notes.isNullsAreSortedLow()).thenReturn(false);
            final SqlDialectContext dialectContext = new SqlDialectContext(notes);
            final Class dialectClass = Class.forName("com.exasol.adapter.dialects.impl." + dialect + "SqlDialect");
            final SqlDialect sqlDialect = (SqlDialect)dialectClass.getConstructor(SqlDialectContext.class).newInstance(dialectContext);
            final SqlGenerationVisitor sqlGeneratorVisitor = sqlDialect.getSqlGenerationVisitor(context);
        try {
            return pushdownRequest.getSelect().accept(sqlGeneratorVisitor);
        } catch (final Exception e)
        {
            System.err.println("Exception in: " + testFile + " Test#: " + testNr + " dialect: " + dialect);
            throw e;
        }
    }

    private Map<String, List<String>> getExpectedPushdownQueriesFrom(final String jsonTest, final int testNr) throws Exception {
        final JsonObject root = JsonHelper.getJsonObject(jsonTest);
        final JsonObject test = root.getJsonArray(TEST_FILE_KEY_TESTCASES).getValuesAs(JsonObject.class).get(testNr);
        final JsonObject expectedResponses = test.getJsonObject(TEST_FILE_KEY_EXP_PD_RESPONSE);
        final Map<String, List<String>> expectedQueriesForDialects = new HashMap<>();
        for ( final String dialect : expectedResponses.keySet()) {
            final int numberOfPushdownResponses = test.getJsonObject(TEST_FILE_KEY_EXP_PD_RESPONSE).getJsonArray(dialect).size();
            final List<String> pushdownResponses = new ArrayList<>(numberOfPushdownResponses);
            for(int pushdownNr = 0; pushdownNr < numberOfPushdownResponses; pushdownNr++) {
                pushdownResponses.add(test.getJsonObject(TEST_FILE_KEY_EXP_PD_RESPONSE).getJsonArray(dialect).get(pushdownNr)
                        .toString().replaceAll("\\\\\"", "\"").replaceAll("^\"+", "").replaceAll("\"$", ""));
            }
            expectedQueriesForDialects.put(dialect, pushdownResponses);
        }
        return expectedQueriesForDialects;
    }
}